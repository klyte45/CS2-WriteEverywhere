using Belzont.Interfaces;
using Belzont.Utils;
using BelzontWE.Sprites;
using Colossal.OdinSerializer.Utilities;
using Colossal.PSI.Common;
using Game.SceneFlow;
using Game.UI;
using Game.UI.Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Reflection;
using System.Text.RegularExpressions;

namespace BelzontWE.Bridge
{
    [Obsolete("Don't reference methods on this class directly. Always use reverse patch to access them, and don't use this mod DLL as hard dependency of your own mod.", true)]
    public static class ImageManagementBridge
    {

        public static string GetImageAtlasVersion() => BasicIMod.FullVersion;

        public static void RegisterImageAtlas(Assembly mainAssembly, string atlasName, string[] imagePaths, Action<string> onCompleteLoading = null)
        {
            new CoroutineWithData<string>(GameManager.instance, RegisterImageAtlas_Internal(mainAssembly, atlasName, imagePaths), onCompleteLoading);
        }

        private static IEnumerator<string> RegisterImageAtlas_Internal(Assembly mainAssembly, string atlasName, string[] imagePaths)
        {
            yield return null;
            var modData = ModManagementUtils.GetModDataFromMainAssembly(mainAssembly);
            var modIdentifier = modData.asset.identifier;
            var displayName = modData.asset.mod.displayName;
            var targetAtlasName = WEModIntegrationUtility.GetModAccessName(mainAssembly, atlasName);
            var notifGroup = $"{WEAtlasesLibrary.LOAD_FROM_MOD_NOTIFICATION_ID_PREFIX}:{targetAtlasName}";
            Dictionary<string, ILocElement> args = new()
            {
                ["atlasName"] = LocalizedString.Value(atlasName),
                ["mod"] = LocalizedString.Value(displayName),
            };
            try
            {
                if (atlasName.IsNullOrWhitespace()) throw new ArgumentNullException("atlasName");
                if (imagePaths is null) throw new ArgumentNullException("imagePaths");
                if (imagePaths.Length == 0) throw new ArgumentOutOfRangeException("imagePaths", "Should not be empty.");
                if (!Regex.IsMatch(atlasName, "[a-z_A-Z0-9]{3,}")) throw new ArgumentException("Should have at least 3 characters, alphanumeric or underscore only.", "atlasName");
                if (targetAtlasName.Length > 60) throw new ArgumentException($"Should have at most {60 + targetAtlasName.Length - atlasName.Length} characters, alphanumeric or underscore only.", "atlasName");
                if (CheckImageAtlasExists(mainAssembly, atlasName)) throw new DuplicateNameException("Atlas already exists!");
                WEAtlasesLibrary.Instance.LoadImagesToAtlas(mainAssembly, atlasName, imagePaths, modIdentifier, displayName, notifGroup, args);

                NotificationHelper.NotifyProgress(notifGroup, 100, textI18n: "generatingAtlasesCacheMod.complete", titleI18n: WEAtlasesLibrary.LOAD_FROM_MOD_NOTIFICATION_ID_PREFIX, argsText: args, argsTitle: args);
            }
            catch (Exception e)
            {
                void onNotifClick()
                {
                    var details = LocalizedString.Value($"Exception generated by the mod {displayName ?? modIdentifier} ({modIdentifier}), affecting Write Everywhere.\n\n{e}");
                    LocalizedString title = new("K45::WE.vuio[generatingAtlasesCacheMod.errorDialog.title]", null, args);
                    LocalizedString message = new("K45::WE.vuio[generatingAtlasesCacheMod.errorDialog.header]", null, args);
                    LocalizedString confirmAction = LocalizedString.Id("Common.OK");
                    var dialog = new MessageDialog(title, message, details, true, confirmAction);
                    GameManager.instance.userInterface.appBindings.ShowMessageDialog(dialog, (x) => NotificationHelper.RemoveNotification(notifGroup));
                }
                NotificationHelper.NotifyWithCallback(notifGroup, ProgressState.Failed, onNotifClick, titleI18n: WEAtlasesLibrary.LOAD_FROM_MOD_NOTIFICATION_ID_PREFIX, argsText: args, argsTitle: args, textI18n: "generatingAtlasesCacheMod.error");
                LogUtils.DoWarnLog("Error with WE integrable mod:", e);
            }
            yield return targetAtlasName;
        }

        public static bool CheckImageAtlasExists(Assembly mainAssembly, string atlasName) => WEAtlasesLibrary.Instance.AtlasExists(WEModIntegrationUtility.GetModAccessName(mainAssembly, atlasName));

        public static void EnsureAtlasDeleted(Assembly mainAssembly, string atlasName)
        {
            if (CheckImageAtlasExists(mainAssembly, atlasName))
            {
                WEAtlasesLibrary.Instance.UnregisterModAtlas(mainAssembly, atlasName);
            }
        }
    }
}
